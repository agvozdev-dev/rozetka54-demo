{"version":3,"file":"711-d95544145a46e4c0023e.js","mappings":"kMAA4KA,E,oBAAIC,G,gBAAE,CAAC,QAAQ,UAAU,YAAY,WAAW,iBAAiB,MAAM,eAAe,WAAW,iBAAiB,kBAAkB,cAAkCC,EAAEC,EAAQ,KAAyM,SAASC,EAAEF,EAAEG,EAAED,EAAEE,EAAEC,GAAG,IAAIC,EAAEN,EAAEO,MAAMC,EAAER,EAAES,QAAQC,EAAEV,EAAEW,UAAUC,EAAEZ,EAAEa,SAASC,EAAEd,EAAEe,eAAeC,EAAEhB,EAAEiB,IAAIC,EAAElB,EAAEmB,aAAaC,EAAEpB,EAAEqB,SAASC,OAAE,IAASF,EAAE,GAAGA,EAAEG,EAAEvB,EAAEwB,eAAeC,EAAEzB,EAAE0B,gBAAgBC,EAAE3B,EAAE4B,UAAU,OAAE,IAASD,EAAE,QAAQA,EAAE,GAAEE,EAAAA,EAAAA,GAAE7B,EAAED,GAAG+B,EAAExB,EAAE,MAAM,EAAEA,EAAE,OAAO,EAAEA,EAAE,OAAO,EAAEA,EAAE,OAAO,EAAEA,EAAE,YAAY,EAAEA,EAAEoB,gBAAgB,EAAE,KAAK,UAAU,GAAGJ,GAAES,EAAAA,EAAAA,GAAE,CAACH,UAAU,EAAEJ,eAAeD,EAAEG,gBAAgBD,GAAGH,GAAG,IAAI,EAAEU,EAAAA,cAAgBC,EAAAA,EAAE,CAAC,OAAO,EAAE,MAAMH,EAAE,OAAO,GAAGE,EAAAA,cAAgBE,EAAAA,GAAEH,EAAAA,EAAAA,GAAE,IAAGI,EAAAA,EAAAA,GAAE,EAAEvB,EAAE,EAAEkB,EAAE,EAAE,EAAE,EAAEP,KAAKS,EAAAA,cAAgBI,EAAAA,GAAEL,EAAAA,EAAAA,GAAE,GAAG,EAAE,CAAC,MAAMD,EAAE,OAAO,EAAE,UAAUZ,IAAGmB,EAAAA,EAAAA,GAAE3B,EAAEE,EAAE,EAAEJ,EAAEM,EAAE,EAAEE,EAAEM,MAAM,OAAOnB,EAAE,UAAUD,EAAE,SAASE,EAAE,QAAsBC,EAAE,QAAQP,EAAE,EAAEK,EAAE,QAAQE,EAAE,SAAwBH,EAAE,SAAQ,GAAI,WAAWC,EAAE,SAASL,EAAE,KAAKK,EAAE,QAAQE,EAAE,UAAx4BP,EAAE,SAAS+B,EAAEE,EAAEE,GAAG,OAAOA,IAAIA,EAAEjC,EAAEsC,WAAWP,IAAIE,EAAEM,OAAOV,GAAGI","sources":["webpack://gatsby-starter-hello-world/../src/components/lazy-hydrate.tsx"],"sourcesContent":["/* global HAS_REACT_18 */\nimport React, { MutableRefObject } from \"react\"\nimport { GatsbyImageProps } from \"./gatsby-image.browser\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImageProps, MainImage } from \"./main-image\"\nimport { getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { ReactElement } from \"react\"\nimport type { Root } from \"react-dom/client\"\n\ntype LazyHydrateProps = Omit<GatsbyImageProps, \"as\" | \"style\" | \"className\"> & {\n  isLoading: boolean\n  isLoaded: boolean // alwaystype SetStateAction<S> = S | ((prevState: S) => S);\n  toggleIsLoaded: (toggle: boolean) => void\n  ref: MutableRefObject<HTMLImageElement | undefined>\n}\n\nlet reactRender\nlet reactHydrate\nif (HAS_REACT_18) {\n  const reactDomClient = require(`react-dom/client`)\n  reactRender = (\n    Component: React.ReactChild | Iterable<React.ReactNode>,\n    el: ReactDOM.Container,\n    root: Root\n  ): Root => {\n    if (!root) {\n      root = reactDomClient.createRoot(el)\n    }\n\n    root.render(Component)\n\n    return root\n  }\n  reactHydrate = (\n    Component: React.ReactChild | Iterable<React.ReactNode>,\n    el: ReactDOM.Container\n  ): Root => reactDomClient.hydrateRoot(el, Component)\n} else {\n  const reactDomClient = require(`react-dom`)\n  reactRender = (\n    Component: React.ReactChild | Iterable<React.ReactNode>,\n    el: ReactDOM.Container\n  ): void => {\n    reactDomClient.render(Component, el)\n  }\n  reactHydrate = reactDomClient.hydrate\n}\n\nexport function lazyHydrate(\n  {\n    image,\n    loading,\n    isLoading,\n    isLoaded,\n    toggleIsLoaded,\n    ref,\n    imgClassName,\n    imgStyle = {},\n    objectPosition,\n    backgroundColor,\n    objectFit = `cover`,\n    ...props\n  }: LazyHydrateProps,\n  root: MutableRefObject<HTMLElement | undefined>,\n  hydrated: MutableRefObject<boolean>,\n  forceHydrate: MutableRefObject<boolean>,\n  reactRootRef: MutableRefObject<Root>\n): (() => void) | null {\n  const {\n    width,\n    height,\n    layout,\n    images,\n    placeholder,\n    backgroundColor: wrapperBackgroundColor,\n  } = image\n\n  const cacheKey = JSON.stringify(images)\n\n  imgStyle = {\n    objectFit,\n    objectPosition,\n    backgroundColor,\n    ...imgStyle,\n  }\n\n  const component = (\n    <LayoutWrapper layout={layout} width={width} height={height}>\n      <Placeholder\n        {...getPlaceholderProps(\n          placeholder,\n          isLoaded,\n          layout,\n          width,\n          height,\n          wrapperBackgroundColor,\n          objectFit,\n          objectPosition\n        )}\n      />\n\n      <MainImage\n        {...(props as Omit<MainImageProps, \"images\" | \"fallback\">)}\n        width={width}\n        height={height}\n        className={imgClassName}\n        {...getMainProps(\n          isLoading,\n          isLoaded,\n          images,\n          loading,\n          toggleIsLoaded,\n          cacheKey,\n          ref,\n          imgStyle\n        )}\n      />\n    </LayoutWrapper>\n  )\n\n  if (root.current) {\n    // Force render to mitigate \"Expected server HTML to contain a matching\" in develop\n    if (hydrated.current || forceHydrate.current || HAS_REACT_18) {\n      reactRootRef.current = reactRender(\n        component,\n        root.current,\n        reactRootRef.current\n      )\n    } else {\n      reactHydrate(component, root.current)\n    }\n    hydrated.current = true\n  }\n\n  return (): void => {\n    if (root.current) {\n      reactRender(\n        null as unknown as ReactElement,\n        root.current,\n        reactRootRef.current\n      )\n    }\n  }\n}\n"],"names":["forceHydrate","image","createRoot","isLoading","E","imgClassName","hydrate","objectPosition","backgroundColor","objectFit","props","width","height","layout","images","placeholder","wrapperBackgroundColor","cacheKey","JSON","stringify","require","component","React","LayoutWrapper","Placeholder","reactRender","getPlaceholderProps","MainImage","className","getMainProps","current","reactHydrate","el","reactDomClient","hydrated","Component","root","HAS_REACT_18","hydrateRoot","lazyHydrate","isLoaded","toggleIsLoaded"],"sourceRoot":""}